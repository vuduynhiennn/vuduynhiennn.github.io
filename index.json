[{"body":"","link":"https://vuduynhien.com/","section":"","tags":null,"title":""},{"body":"","link":"https://vuduynhien.com/tags/c-c%C6%A1-b%E1%BA%A3n/","section":"tags","tags":null,"title":"C cơ bản"},{"body":"","link":"https://vuduynhien.com/categories/c-c%C6%A1-b%E1%BA%A3n/","section":"categories","tags":null,"title":"C cơ bản"},{"body":"","link":"https://vuduynhien.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"cùng mình tìm hiểu về 2 khái niệm này nha.\n1. Logical Operators Hay còn được gọi với cái tên toán tử logic. Lưu ý: trong C hay hầu hết các ngôn ngữ lập trình khác thì bất kể biểu thức nào có kết quả khác 0 sẽ được convert thành true, ngược lại biểu thức nào có kết quả là 0 sẽ được convert thành false. Đọc nhẩm câu này rồi hãng đọc xuống phía dưới nhé.\nI. Toán tử \u0026amp;\u0026amp;\nHay còn gọi là \u0026quot;và\u0026quot;, toán tử \u0026amp;\u0026amp; sẽ kiểm tra nếu cả 2 biểu thức đều có kết quả là true sẽ trả về true. Còn nếu biểu thức thứ nhất là false thì biểu thức thứ 2 sẽ không được kiểm tra nữa. Hiểu đơn giản là toán tử \u0026amp;\u0026amp; sẽ kiểm tra từ trái sang phải, nếu nó phát hiện biểu thức nào sai sẽ trả về false luôn, còn nếu chạy từ đầu đến cuối không phát hiện cái nào sai thì biểu thức trả về true\nif ((5 == 5) \u0026amp;\u0026amp; (7 == 10 \u0026amp;\u0026amp; 6 == 6)) printf(\u0026quot;sai rui bro\u0026quot;) \nII. Toán tử ||\nHay còn gọi là \u0026quot;hoặc\u0026quot;, toán tử || sẽ kiểm tra nếu ít nhất một trong 2 biểu thức có kết quả là true thì sẽ trả về true. Nếu biểu thức đầu tiên là true thì sẽ trả về true luôn khỏi kiểm tra nữa. Hiểu đơn giản là toán tử || sẽ kiểm tra từ trái qua phải, nếu nó phát hiện biểu thức nào true thì trả về true luôn, khỏi kiểm tra các thằng tiếp theo, còn nếu chạy từ đầu đến cuối không phát hiện ra thằng nào true cả thì biểu thức trả về false.\nif ((4 == 5 || 2 == 4 || 6 == 6 || 1 == 2)) printf(\u0026quot;oki dung nha nguoi ae\u0026quot;)\nNOTE: bạn có thể thêm ! đằng trước biểu thức để tìm giá trị đối lập\nif (! (4 == 5)) sẽ trả về true, vì 4 == 5 là false nhưng ! đã trả về kết quả trái ngược false là true. Sau khi biết kiến thức này bạn có thể nói với bạn gái của bạn là: ! (em là cô gái xinh đẹp nhất trên cái cuộc đời này).\nBởi vì sau khi nhận được kết quả trả về, biểu thức logical sẽ không xét các biểu thức phía bên phải biểu thức đúng thế nên nếu có ý định thực hiện điều gì bạn nên viết ra bên ngoài của biểu thức logic\nif (0 \u0026amp;\u0026amp; x++) bar() hàm bar() sẽ không được gọi và x cũng sẽ không được tăng lên, nếu mà bạn có ý định tăng giá trị của x lên thì nên viết ra bên ngoài của biểu thức logical\nif (1 \u0026amp;\u0026amp; x++) bar() hàm bar() sẽ được gọi và x cũng sẽ được tăng lên.\nif (1 \u0026amp;\u0026amp; x++ \u0026amp;\u0026amp; 1 == 3) bar() hàm bar() sẽ không được gọi do kết quả của biểu thức logic trả về false, nhưng x vẫn được tăng lên 1 giá trị do biểu thức đã thực thi xong x++ mới thực thi đến biểu thức sai. \\\n2 BITWISE Logical Operators Hay còn gọi là phép toán thao tác bit.\nBit là các chữ số mang trạng thái tắt hoặc mở hay 0 và 1 trong máy tính. Khi các chữ số này được kết hợp với nhau sẽ ra 1 dãy nhị phân. Các bạn tìm hiểu về cách chuyển đổi giữa các hệ trong máy tính nha, cái này hồi cấp 2, thpt có học rồi á.\nVí dụ A = 0B10111001. thì chuyển sang thập phân sẽ là 2 ^ 7 * 1 + 2 ^ 6 * 0 + 2 ^ 5 * 1 + 2 ^ 4 * 1 + 2 ^ 3 * 1 * 2 ^ 2 * 0 + 2 ^ 1 * 0 + 2 ^ 0 *1 = 185 :))) nhìn dài quá có thể mình viết nhầm cơ mà ý là các bạn xếp các chữ số 0 và 1 thành 1 hàng rồi đánh số thức tự giảm dần cho đến 0. Sau đó thực hiện cộng các phép toán là 2 ^ (vị trí của chữ số 0 hoặc 1) * (chữ số 0 hoặc 1)\nI. Phép toán \u0026amp;\nHay còn gọi là AND\n0 and 0 = 0\n1 and 0 = 0\n0 and 1 = 0\n1 and 1 = 1\nNgồi suy luận đi ha. :)) thôi giải thích cho: khi cả 2 bit đều là 1 thì là 1 còn lại 0, nói kiểu bình thường thì là nếu cả 2 điều kiện cùng đúng thì nó đúng và còn lại là sai.\nví dụ 11001001 \u0026amp; 10011011 = 10001001\nII. Phép toán |\nHay còn gọi là OR\n0 | 0 = 0\n1 | 0 = 1\n0 | 1 = 1\n1 | 1 = 1\nkhi cả 2 bit đều là 0 thì là 0 còn lại là 1, nói kiểu nỏmie là khi chỉ cần ít nhất 1 điều kiện là 1 thì biểu thức đúng\nví dụ 1 0 1 1 0 0 1 | 0 0 1 1 0 0 1 1 = 1 0 1 1 1 0 0 1 1\nIII. Phép toán ^\nHay còn gọi là XOR\n0 ^ 0 = 0\n1 ^ 1 = 0\n0 ^ 1 = 1\n1 ^ 0 = 1\nNếu cả 2 bit khác nhau sẽ cho ra kết quả là 1, ngược lại cả 2 bit giống nhau sẽ cho ra kết quả 0. Từ đó ta thấy nếu A XOR B = 0 thì A == B. Nói kiểu bình thường: nếu 2 điều kiện mang giá trị đúng - sai khác nhau thì kết quả trả về đúng.\nIV. Phép toán ~\nHay còn gọi là phép toán NOT\ntức là\n~ 0 = 1\n~ 1 = 0\n~11001001 = 00110110\n=\u0026gt; Như vậy sau khi đọc hết bài viết bạn có thể nhận ra là bitwise operators để thao tác bit còn logical operator là phép toán thao tác giữa các biểu thức.\n","link":"https://vuduynhien.com/post/pbasic/cbs/logicalexpression/","section":"post","tags":["C cơ bản"],"title":"Logical Operators và Bitwise Logical Operators là gì ? chúng khác như thế nào ? "},{"body":"","link":"https://vuduynhien.com/series/l%E1%BA%ADp-tr%C3%ACnh-c/","section":"series","tags":null,"title":"Lập trình C"},{"body":"","link":"https://vuduynhien.com/categories/n%E1%BB%81n-t%E1%BA%A3ng/","section":"categories","tags":null,"title":"Nền tảng"},{"body":"","link":"https://vuduynhien.com/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://vuduynhien.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"để ý đoạn nói về socket ha file description cả cái này nữa\n","link":"https://vuduynhien.com/post/pbasic/cbs/note/","section":"post","tags":["NOTE_C"],"title":"NOTE"},{"body":"","link":"https://vuduynhien.com/tags/note_c/","section":"tags","tags":null,"title":"NOTE_C"},{"body":"Vũ Duy Nhiên là một sinh viên.\n","link":"https://vuduynhien.com/about/","section":"","tags":null,"title":"Về Vũ Duy Nhiên"},{"body":"","link":"https://vuduynhien.com/post/pbasic/cbs/","section":"post","tags":null,"title":""},{"body":"","link":"https://vuduynhien.com/post/pbasic/jvbs/","section":"post","tags":null,"title":""},{"body":"","link":"https://vuduynhien.com/post/","section":"post","tags":null,"title":"Posts"}]