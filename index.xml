<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vu Duy Nhien Blog</title>
    <link>https://vuduynhien.com/</link>
    <description>Recent content on Vu Duy Nhien Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://vuduynhien.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mircotask queue là gì ?</title>
      <link>https://vuduynhien.com/post/javascript/posts/micro-task-queue/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/javascript/posts/micro-task-queue/</guid>
      <description>
        
          
            A mircrotask queue is a queue of tasks that are executed after the current task. The microtas queue is handled by the JavaScript engine before it moves on to the next task in the callback queue
console.log(&#39;start&#39;);
setTimeout(function() { console.log(&#39;setTimeout&#39;); }, 0); Promise.resolve().then(function() { console.log(&#39;promise resolve&#39;); }); console.log(&#39;end&#39;);
setTimeout callback is added to the callback queue. The Promise.resolve is added to the microtask queue. The JS engine will first execute all tasks in the microtask queue before moving on to the call queue
          
          
        
      </description>
    </item>
    
    <item>
      <title>Javascript engine là gì ?</title>
      <link>https://vuduynhien.com/post/javascript/posts/js-engine/</link>
      <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/javascript/posts/js-engine/</guid>
      <description>
        
          
            the JavaScript Engine is a program whose main task is to read and execute JavaScript code. The way that this program works is:
 read the code translate it into machine code run that machine code   All modern browser come with their own version of the JS Engine but the most popular one is Google&#39;s V8 Engine.&amp;nbsp;
Here is a list of different JavaScript Engines for each major internet browser:  V8: open source JavaScript Engine developed by Google for Chrome SpiderMonkey: the JavaScript Engine powering Mozilla FireFox JavaScriptCore: open source JavaScript Engine developed by Apple for Safari Rhino: open source JavaScript Engine managed by Mozilla foundation Chakra: a JavaScript Engnine for Microsoft Edge JerryScript: a JavaScript engine for the IOT  A JavaScript engine will always have: Call stack and Memory Heap
          
          
        
      </description>
    </item>
    
    <item>
      <title>Javascript runtime là gì ?</title>
      <link>https://vuduynhien.com/post/javascript/posts/js-runtime-la-gi/</link>
      <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/javascript/posts/js-runtime-la-gi/</guid>
      <description>
        
          
            A javascript runtime is an environment which provides all the necessary components 
Components of JavaScript Runtime     JavaScript Engnine Web API&amp;nbsp;  Callback Queue Microtask Queue       In order to use and run a javascript program.&amp;nbsp; Js code may be executed in one of two runtime enviroments:   The runtime environment of a browser (like chrome or firefox)  The Node runtime environment.
          
          
        
      </description>
    </item>
    
    <item>
      <title>web api là gì ?</title>
      <link>https://vuduynhien.com/post/javascript/posts/web-api/</link>
      <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/javascript/posts/web-api/</guid>
      <description>
        
          
            API stands for Application Programming Interface
A WebAPI is an application programming interface for the Web
A browser API can extend the functionality of a web browser
A server API can extend the functionality of a web server
API are constructs made avaible in programming languages to allow developers to create complex functionality more easily. They abstract more complex code away from you, providing some easier syntax to use in its place.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hướng dẫn về redux và redux toolkit.</title>
      <link>https://vuduynhien.com/post/pweb/react_js/redux/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/pweb/react_js/redux/</guid>
      <description>
        
          
            REDUX LÀ GÌ ? Redux là khuôn mẫu, là thư viện cho việc quản lí, cập nhật các state trong web app thông qua việc sử dụng các sự kiện hay còn được gọi là &amp;quot;actions&amp;quot;. Redux giúp tập trung hóa trong việc lưu trữ các state mà được sử dụng xuyên suốt toàn bộ web app, state chỉ thay đổi trong 1 hành vi chủ ý, có thể dự đoán được điều gì sẽ xảy ra và xảy ra như thế nào với các state.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Lifting state up</title>
      <link>https://vuduynhien.com/post/pweb/react_js/lifting_state_up/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/pweb/react_js/lifting_state_up/</guid>
      <description>
        
          
            Đôi khi bạn muốn state của 2 component cùng thay đổi. Để làm điều này, thì xóa state từ 2 component đó đi, sau đó chuyển cái state sang component cha gần nhất giữa 2 component, rồi pass state thông qua props. điều này gọi là lifting state up đó anh bạn, đây là sẽ điều bạn sẽ chơi thường xuyên khi code react js          import { useState } from &#39;react&#39;; function Panel({ title, children }) { const [isActive, setIsActive] = useState(false); return ( &amp;lt;section className=&amp;quot;panel&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;{title}&amp;lt;/h3&amp;gt; {isActive ?
          
          
        
      </description>
    </item>
    
    <item>
      <title>Logical Operators và Bitwise Logical Operators là gì ? chúng khác như thế nào ? </title>
      <link>https://vuduynhien.com/post/pbasic/cbs/logicalexpression/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/pbasic/cbs/logicalexpression/</guid>
      <description>
        
          
            cùng mình tìm hiểu về 2 khái niệm này nha.
1. Logical Operators Hay còn được gọi với cái tên toán tử logic. Lưu ý: trong C hay hầu hết các ngôn ngữ lập trình khác thì bất kể biểu thức nào có kết quả khác 0 sẽ được convert thành true, ngược lại biểu thức nào có kết quả là 0 sẽ được convert thành false. Đọc nhẩm câu này rồi hãng đọc xuống phía dưới nhé.
          
          
        
      </description>
    </item>
    
    <item>
      <title>NOTE</title>
      <link>https://vuduynhien.com/post/pbasic/cbs/note/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://vuduynhien.com/post/pbasic/cbs/note/</guid>
      <description>
        
          
            để ý đoạn nói về socket ha file description cả cái này nữa
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
